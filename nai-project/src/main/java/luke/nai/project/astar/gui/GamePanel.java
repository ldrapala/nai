package luke.nai.project.astar.gui;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;

/**
 *
 * @author LukaszDrapala
 */
public class GamePanel extends javax.swing.JPanel {

    private Context context;
    private GameModel gameModel;
    private JButton[][] buttons;

    /**
     * Creates new form GamePanel
     */
    public GamePanel() {
        initComponents();
        gameModel = new GameModel();
    }

    public void setFieldsInRow(int row) {
        removeAll();
        buttons = new JButton[row][row];
        GridBagConstraints gbc = new GridBagConstraints();
        int buttonHeight = getParent().getHeight() / buttons.length + 1;
        int buttonWidht = getParent().getWidth() / buttons.length + 1;
        int counter = 0;
        for (int y = 0; y < buttons.length; y++) {
            for (int x = 0; x < buttons[y].length; x++) {
                gbc.fill = GridBagConstraints.BOTH;
                gbc.gridx = x;
                gbc.gridy = y;
                gbc.weightx = 1;
                gbc.weighty = 1;
                JButton jButton = new JButton();
                buttons[y][x] = jButton;
                jButton.setMargin(new Insets(1, 1, 1, 1));
                jButton.setBackground(ColorSupplier.getDefaultColor());
                jButton.setText(String.valueOf(++counter));
                final int x1 = y;
                final int y1 = x;
                jButton.addActionListener((ActionEvent e) -> {
                    switch (context) {
                        case CHOOSE_START:
                            if (jButton.getBackground().equals(ColorSupplier.getStartColor())) {
                                jButton.setBackground(ColorSupplier.getDefaultColor());
                                gameModel.clearStart();
                            } else {
                                jButton.setBackground(ColorSupplier.getStartColor());
                                gameModel.setStart(x1, y1);
                            }
                            break;
                        case CHOOSE_END:
                            if (jButton.getBackground().equals(ColorSupplier.getEndColor())) {
                                jButton.setBackground(ColorSupplier.getDefaultColor());
                                gameModel.clearEnd();
                            } else {
                                jButton.setBackground(ColorSupplier.getEndColor());
                                gameModel.setEnd(x1, y1);
                            }
                            break;
                        case CHOOSE_WALL:
                            if (jButton.getBackground().equals(ColorSupplier.getWallColor())) {
                                jButton.setBackground(ColorSupplier.getDefaultColor());
                                gameModel.clearWall(x1, y1);
                            } else {
                                jButton.setBackground(ColorSupplier.getWallColor());
                                gameModel.setWall(x1, y1);
                            }
                            break;
                    }
                });
                jButton.setSize(buttonHeight, buttonWidht);
                add(jButton, gbc);

            }
            gameModel.setRows(row);
        }
        revalidate();
        repaint();
    }

    public void setContext(Context context) {
        this.context = context;
    }

    public List<Point> start() throws Exception {
        List<Point> path = gameModel.start();
        for (Point point : path) {
            if (buttons[point.getY()][point.getX()].getBackground().equals(ColorSupplier.getDefaultColor())) {
                buttons[point.getY()][point.getX()].setBackground(ColorSupplier.getPathColor());
            }
        }
        return path;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
